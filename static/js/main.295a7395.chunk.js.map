{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Ajv","require","schema","Valid","display","this","props","valid","map","x","i","push","react_default","a","createElement","key","JSON","stringify","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","e","newVal","target","setState","preventDefault","parse","console","log","validate","compile","errors","className","onChange","App_Valid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gwSAEIA,SAAMC,EAAQ,KACdC,EAASD,EAAQ,IAEfE,mLAEF,IAAIC,EAAU,GAKd,OAJAC,KAAKC,MAAMC,MAAMC,IAAI,SAACC,EAAGC,GAEvB,OADAN,EAAQO,KAAKC,EAAAC,EAAAC,cAAA,MAAIC,IAAKL,GAAGE,EAAAC,EAAAC,cAAA,WAAME,KAAKC,UAAUR,EAAG,KAAM,MAChDA,IAGPG,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAKV,WARIc,aAqELC,cAvDb,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAc,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApB,KAAMC,KACDoB,MAAQ,CACXC,MAAO,OACPzB,OAAQA,EACRK,MAAO,CAAC,YAEVa,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAPHA,4EAUNW,GACX,IAAIC,EAASD,EAAEE,OAAON,MACtBtB,KAAK6B,SAAS,CAACP,MAAOK,IACtBD,EAAEI,iBACF,IACEH,EAAShB,KAAKoB,MAAMJ,GACpB,MAAMD,GACLM,QAAQC,IAAIP,GAGf,IACIQ,GADM,IAAIvC,GACKwC,QAAQnC,KAAKqB,MAAMxB,QAElCK,EAAQgC,EAASP,GACjBzB,EACAA,EAAQ,CAAC,WAET8B,QAAQC,IAAIC,EAASE,QACrBlC,EAAQgC,EAASE,QAErBpC,KAAK6B,SAAS,CAAC3B,MAAOA,qCAItB,OACEK,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACb9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,UACb9B,EAAAC,EAAAC,cAAA,oCAEFF,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,QACb9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,QACb9B,EAAAC,EAAAC,cAAA,YACEa,MAAOtB,KAAKqB,MAAMC,MAClBgB,SAAUtC,KAAKuB,gBAGnBhB,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,SACb9B,EAAAC,EAAAC,cAAC8B,EAAD,CAAOrC,MAAOF,KAAKqB,MAAMnB,kBAhDnBW,aCNE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.295a7395.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nlet Ajv = require('ajv');\nlet schema = require('./schema.json');\n\nclass Valid extends Component {\n  render() {\n    let display = [];\n    this.props.valid.map((x, i) => {\n      display.push(<li key={i}><pre>{JSON.stringify(x, null, 2)}</pre></li>);\n      return x;\n    });\n    return (\n      <div><ul>{display}</ul></div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 'test',\n      schema: schema,\n      valid: [\"Invalid\"]\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e){\n    let newVal = e.target.value;\n    this.setState({value: newVal});\n    e.preventDefault();\n    try {\n      newVal = JSON.parse(newVal);\n    } catch(e) {\n       console.log(e); \n    }\n\n    let ajv = new Ajv();\n    let validate = ajv.compile(this.state.schema);\n    //Validation Rule\n    let valid = validate(newVal);\n    if (valid) {\n        valid = ['Valid!'];\n    } else {\n        console.log(validate.errors);\n        valid = validate.errors;\n    }\n    this.setState({valid: valid});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>BIDS Schema Validator</h1>\n        </div>\n        <div className=\"body\">\n          <div className=\"left\">\n            <textarea\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"right\">\n            <Valid valid={this.state.valid}/>\n          </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}